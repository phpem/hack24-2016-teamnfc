{% extends 'base.html.twig' %}

{% block body %}
    <script src='http://cdn.html5quintus.com/v0.2.0/quintus-all.js'></script>
    <script src="js/gamepad.js"></script>
    <script src="https://js.pusher.com/3.0/pusher.min.js"></script>
    <script src="//code.jquery.com/jquery-1.12.0.min.js"></script>
    <script>

        var gamepad = new Gamepad();
        gamepad.bind(Gamepad.Event.CONNECTED, function(device) {
            // a new gamepad connected
        });

        gamepad.bind(Gamepad.Event.DISCONNECTED, function(device) {
            // gamepad disconnected
        });

        gamepad.bind(Gamepad.Event.UNSUPPORTED, function(device) {
            // an unsupported gamepad connected (add new mapping)
        });

        gamepad.bind(Gamepad.Event.BUTTON_DOWN, function(e) {
            console.log('button down');
            // e.control of gamepad e.gamepad pressed down
        });

        gamepad.bind(Gamepad.Event.BUTTON_UP, function(e) {
            console.log('button up');
        });

        gamepad.bind(Gamepad.Event.AXIS_CHANGED, function(e) {
            /////////////////////////////
            /// left
            if (e.axis == "LEFT_STICK_X" && e.value == -1) {
                Q.inputs['left'] = true;
            }

            if (e.axis =="LEFT_STICK_X" && e.value == 0) {
                Q.inputs['left'] = false;
            }
            /////////////////////////////
            // right
            if (e.axis == "LEFT_STICK_X" && e.value == 1) {
                Q.inputs['right'] = true;
            }

            if (e.axis =="LEFT_STICK_X" && e.value == 0) {
                Q.inputs['right'] = false;
            }

            /////////////////////////////
            // up
            if (e.axis == "LEFT_STICK_Y" && e.value == -1) {
                console.log('up');
                Q.inputs['up'] = true;
            }

            if (e.axis =="LEFT_STICK_Y" && e.value == 0) {
                Q.inputs['up'] = false;
            }


            /////////////////////////////
            // down
            if (e.axis == "LEFT_STICK_Y" && e.value == 1) {
                console.log('down');
                Q.inputs['down'] = true;
            }

            if (e.axis =="LEFT_STICK_Y" && e.value == 0) {
                Q.inputs['down'] = false;
            }



            // e.axis changed to value e.value for gamepad e.gamepad
        });

        gamepad.bind(Gamepad.Event.TICK, function(gamepads) {
            //console.log('tick');
            // gamepads were updated (around 60 times a second)
        });

        if (!gamepad.init()) {
            // Your browser does not support gamepads, get the latest Google Chrome or Firefox
        }

        document.onkeydown = function(event) {
            console.log(event.keyCode);
        };

        var haveEvents = 'ongamepadconnected' in window;
        var controllers = {};

        function connecthandler(e) {
            //addgamepad(e.gamepad);
        }

        function addgamepad(gamepad) {
            controllers[gamepad.index] = gamepad;

            var d = document.createElement("div");
            d.setAttribute("id", "controller" + gamepad.index);

            var t = document.createElement("h1");
            t.appendChild(document.createTextNode("gamepad: " + gamepad.id));
            d.appendChild(t);

            var b = document.createElement("div");
            b.className = "buttons";
            for (var i = 0; i < gamepad.buttons.length; i++) {
                var e = document.createElement("span");
                e.className = "button";
                //e.id = "b" + i;
                e.innerHTML = i;
                b.appendChild(e);
            }

            d.appendChild(b);

            var a = document.createElement("div");
            a.className = "axes";

            for (var i = 0; i < gamepad.axes.length; i++) {
                var p = document.createElement("progress");
                p.className = "axis";
                //p.id = "a" + i;
                p.setAttribute("max", "2");
                p.setAttribute("value", "1");
                p.innerHTML = i;
                a.appendChild(p);
            }

            d.appendChild(a);

            // See https://github.com/luser/gamepadtest/blob/master/index.html
            var start = document.getElementById("start");
            if (start) {
                start.style.display = "none";
            }

            document.body.appendChild(d);
            requestAnimationFrame(updateStatus);
        }

        function disconnecthandler(e) {
            removegamepad(e.gamepad);
        }

        function removegamepad(gamepad) {
            var d = document.getElementById("controller" + gamepad.index);
            document.body.removeChild(d);
            delete controllers[gamepad.index];
        }

        function updateStatus() {
            requestAnimationFrame(updateStatus);
        }



        window.addEventListener("gamepadconnected", connecthandler);
        window.addEventListener("gamepaddisconnected", disconnecthandler);



        // Now set up your game (most games will load a separate .js file)
        var Q = Quintus()                          // Create a new engine instance
                .include("Sprites, Scenes, Input, 2D, Touch, UI") // Load any needed modules
                .setup()                           // Add a canvas element onto the page
                .controls(true);


        // You can create a sub-class by extending the Q.Sprite class to create Q.Player
        Q.Sprite.extend("Player",{

            // the init constructor is called on creation
            init: function(p) {

                // You can call the parent's constructor with this._super(..)
                this._super(p, {
                    sheet: "player",  // Setting a sprite sheet sets sprite width and height
                    x: 410,           // You can also set additional properties that can
                    y: 90            // be overridden on object creation
                });

                // Add in pre-made components to get up and running quickly
                this.add('2d, platformerControls');

                // Write event handlers to respond hook into behaviors.
                // hit.sprite is called everytime the player collides with a sprite
                this.on("hit.sprite",function(collision) {
                    // Check the collision, if it's the Tower, you win!
                    if(collision.obj.isA("Tower")) {
                        // Stage the endGame scene above the current stage
                        Q.stageScene("endGame",1, { label: "You Won!" });
                        // Remove the player to prevent them from moving
                        this.destroy();
                    }
                });
            }
        });

        // Sprites can be simple, the Tower sprite just sets a custom sprite sheet
        Q.Sprite.extend("Tower", {
            init: function(p) {
                this._super(p, { sheet: 'tower' });
            }
        });

        // Create the Enemy class to add in some baddies
        Q.Sprite.extend("Enemy",{
            init: function(p) {
                this._super(p, { sheet: 'enemy', vx: 100 });

                // Enemies use the Bounce AI to change direction
                // whenver they run into something.
                this.add('2d, aiBounce');

                // Listen for a sprite collision, if it's the player,
                // end the game unless the enemy is hit on top
                this.on("bump.left,bump.right,bump.bottom",function(collision) {
                    if(collision.obj.isA("Player")) {
                        Q.stageScene("endGame",1, { label: "You Died" });
                        collision.obj.destroy();
                    }
                });

                // If the enemy gets hit on the top, destroy it
                // and give the user a "hop"
                this.on("bump.top",function(collision) {
                    if(collision.obj.isA("Player")) {
                        this.destroy();
                        collision.obj.p.vy = -300;
                    }
                });
            }
        });

        // Create a new scene called level 1
        Q.scene("level1",function(stage) {

            // Add in a tile layer, and make it the collision layer
            stage.collisionLayer(new Q.TileLayer({
                dataAsset: 'level.json',
                sheet:     'tiles' }));

            // Create the player and add him to the stage
            var player = stage.insert(new Q.Player());

            // Give the stage a moveable viewport and tell it
            // to follow the player.
            stage.add("viewport").follow(player);

            // Add in a couple of enemies
            stage.insert(new Q.Enemy({ x: 700, y: 0 }));
            stage.insert(new Q.Enemy({ x: 800, y: 0 }));

            // Finally add in the tower goal
            stage.insert(new Q.Tower({ x: 180, y: 50 }));
        });

        // To display a game over / game won popup box,
        // create a endGame scene that takes in a `label` option
        // to control the displayed message.
        Q.scene('endGame',function(stage) {
            var container = stage.insert(new Q.UI.Container({
                x: Q.width/2, y: Q.height/2, fill: "rgba(0,0,0,0.5)"
            }));

            var button = container.insert(new Q.UI.Button({ x: 0, y: 0, fill: "#CCCCCC",
                label: "Play Again" }))
            var label = container.insert(new Q.UI.Text({x:10, y: -10 - button.p.h,
                label: stage.options.label }));
            // When the button is clicked, clear all the stages
            // and restart the game.
            button.on("click",function() {
                Q.clearStages();
                Q.stageScene('level1');
            });

            // Expand the container to visibily fit it's contents
            container.fit(20);
        });
        // Q.load can be called at any time to load additional assets
        // assets that are already loaded will be skipped
        Q.load("sprites.png, sprites.json, level.json, tiles.png",
            // The callback will be triggered when everything is loaded
            function() {
                // Sprites sheets can be created manually
                Q.sheet("tiles","tiles.png", { tilew: 32, tileh: 32 });

                // Or from a .json asset that defines sprite locations
                Q.compileSheets("sprites.png","sprites.json");

                // Finally, call stageScene to run the game
                Q.stageScene("level1");
            }
        );


        /*
        pusher stuff

         */
        Pusher.log = function(message) {
            if (window.console && window.console.log) {
                window.console.log(message);
            }
        };

        var pusher = new Pusher('b6ac1ee705e196be3e27', {
            cluster: 'eu',
            encrypted: true
        });

        var channel = pusher.subscribe('test_channel');
        var switched = false;
        channel.bind('my_event', function(data) {
            if(data.switch == 'true') {
                if( ! switched) {
                    Q.input.keyboardControls({
                        RIGHT: "left",
                        LEFT: "right",
                        UP: "down",
                        DOWN: "up"
                    });
                    switched = true;
                }
                else
                {
                    Q.input.keyboardControls({
                        RIGHT: "right",
                        LEFT: "left",
                        UP: "up",
                        DOWN: "down"
                    });
                    switched = false;
                }
            }

            console.log(data.switch);
        });

    </script>

    <div id="wrapper">
        <div id="container">
            <div id="welcome">
                <h1><span>Welcome to</span> Symfony {{ constant('Symfony\\Component\\HttpKernel\\Kernel::VERSION') }}</h1>
            </div>

            <div id="status">
                <p>
                    <svg id="icon-status" width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1671 566q0 40-28 68l-724 724-136 136q-28 28-68 28t-68-28l-136-136-362-362q-28-28-28-68t28-68l136-136q28-28 68-28t68 28l294 295 656-657q28-28 68-28t68 28l136 136q28 28 28 68z" fill="#759E1A"/></svg>

                    Your application is now ready. You can start working on it at:
                    <code>{{ base_dir }}/</code>
                </p>
            </div>

            <div id="next">
                <h2>What's next?</h2>
                <p>
                    <svg id="icon-book" version="1.1" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="-12.5 9 64 64" enable-background="new -12.5 9 64 64" xml:space="preserve">
                        <path fill="#AAA" d="M6.8,40.8c2.4,0.8,4.5-0.7,4.9-2.5c0.2-1.2-0.3-2.1-1.3-3.2l-0.8-0.8c-0.4-0.5-0.6-1.3-0.2-1.9
                            c0.4-0.5,0.9-0.8,1.8-0.5c1.3,0.4,1.9,1.3,2.9,2.2c-0.4,1.4-0.7,2.9-0.9,4.2l-0.2,1c-0.7,4-1.3,6.2-2.7,7.5
                            c-0.3,0.3-0.7,0.5-1.3,0.6c-0.3,0-0.4-0.3-0.4-0.3c0-0.3,0.2-0.3,0.3-0.4c0.2-0.1,0.5-0.3,0.4-0.8c0-0.7-0.6-1.3-1.3-1.3
                            c-0.6,0-1.4,0.6-1.4,1.7s1,1.9,2.4,1.8c0.8,0,2.5-0.3,4.2-2.5c2-2.5,2.5-5.4,2.9-7.4l0.5-2.8c0.3,0,0.5,0.1,0.8,0.1
                            c2.4,0.1,3.7-1.3,3.7-2.3c0-0.6-0.3-1.2-0.9-1.2c-0.4,0-0.8,0.3-1,0.8c-0.1,0.6,0.8,1.1,0.1,1.5c-0.5,0.3-1.4,0.6-2.7,0.4l0.3-1.3
                            c0.5-2.6,1-5.7,3.2-5.8c0.2,0,0.8,0,0.8,0.4c0,0.2,0,0.2-0.2,0.5c-0.2,0.3-0.3,0.4-0.2,0.7c0,0.7,0.5,1.1,1.2,1.1
                            c0.9,0,1.2-1,1.2-1.4c0-1.2-1.2-1.8-2.6-1.8c-1.5,0.1-2.8,0.9-3.7,2.1c-1.1,1.3-1.8,2.9-2.3,4.5c-0.9-0.8-1.6-1.8-3.1-2.3
                            c-1.1-0.7-2.3-0.5-3.4,0.3c-0.5,0.4-0.8,1-1,1.6c-0.4,1.5,0.4,2.9,0.8,3.4l0.9,1c0.2,0.2,0.6,0.8,0.4,1.5c-0.3,0.8-1.2,1.3-2.1,1
                            c-0.4-0.2-1-0.5-0.9-0.9c0.1-0.2,0.2-0.3,0.3-0.5s0.1-0.3,0.1-0.3c0.2-0.6-0.1-1.4-0.7-1.6c-0.6-0.2-1.2,0-1.3,0.8
                            C4.3,38.4,4.7,40,6.8,40.8z M46.1,20.9c0-4.2-3.2-7.5-7.1-7.5h-3.8C34.8,10.8,32.7,9,30.2,9L-2.3,9.1c-2.8,0.1-4.9,2.4-4.9,5.4
                            L-7,58.6c0,4.8,8.1,13.9,11.6,14.1l34.7-0.1c3.9,0,7-3.4,7-7.6L46.1,20.9z M-0.3,36.4c0-8.6,6.5-15.6,14.5-15.6
                            c8,0,14.5,7,14.5,15.6S22.1,52,14.2,52C6.1,52-0.3,45-0.3,36.4z M42.1,65.1c0,1.8-1.5,3.1-3.1,3.1H4.6c-0.7,0-3-1.8-4.5-4.4h30.4
                            c2.8,0,5-2.4,5-5.4V17.9h3.7c1.6,0,2.9,1.4,2.9,3.1V65.1L42.1,65.1z"/>
                    </svg>

                    Read the documentation to learn
                    <a href="http://symfony.com/doc/{{ constant('Symfony\\Component\\HttpKernel\\Kernel::VERSION')[:3] }}/book/page_creation.html">
                        How to create your first page in Symfony
                    </a>
                </p>
            </div>

        </div>
    </div>
{% endblock %}

{% block stylesheets %}
<style>
    body { background: #F5F5F5; font: 18px/1.5 sans-serif; }
    h1, h2 { line-height: 1.2; margin: 0 0 .5em; }
    h1 { font-size: 36px; }
    h2 { font-size: 21px; margin-bottom: 1em; }
    p { margin: 0 0 1em 0; }
    a { color: #0000F0; }
    a:hover { text-decoration: none; }
    code { background: #F5F5F5; max-width: 100px; padding: 2px 6px; word-wrap: break-word; }
    #wrapper { background: #FFF; margin: 1em auto; max-width: 800px; width: 95%; }
    #container { padding: 2em; }
    #welcome, #status { margin-bottom: 2em; }
    #welcome h1 span { display: block; font-size: 75%; }
    #icon-status, #icon-book { float: left; height: 64px; margin-right: 1em; margin-top: -4px; width: 64px; }
    #icon-book { display: none; }

    @media (min-width: 768px) {
        #wrapper { width: 80%; margin: 2em auto; }
        #icon-book { display: inline-block; }
        #status a, #next a { display: block; }

        @-webkit-keyframes fade-in { 0% { opacity: 0; } 100% { opacity: 1; } }
        @keyframes fade-in { 0% { opacity: 0; } 100% { opacity: 1; } }
        .sf-toolbar { opacity: 0; -webkit-animation: fade-in 1s .2s forwards; animation: fade-in 1s .2s forwards;}
    }
</style>
{% endblock %}
